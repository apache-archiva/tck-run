
def branch = params.JETTY_BRANCH ?: "jetty-9.4.x"
def jdk = params.JDK ?: "jdk8"

node('linux'){
  stage("cleanup"){
    sh "rm -rf *"
  }
  stage("Checkout TCK Run") {
    git url: "https://github.com/jetty-project/tck-run.git", branch: "master"
    stash name: 'ts.jte', includes: 'ts.jte'
    stash name: 'realm.ini', includes: 'realm.ini'
    stash name: 'realm.properties', includes: 'realm.properties'
    stash name: 'test-realm.xml', includes: 'test-realm.xml'
    stash name: 'cacerts.jks', includes: 'cacerts.jks'
    stash name: 'clientcert.jks', includes: 'clientcert.jks'
  }

  stage("Checkout Jetty") {
    git url: "https://github.com/eclipse/jetty.project.git", branch: "$branch"
  }
  stage("Build Jetty") {
    timeout(time: 30, unit: 'MINUTES') {
      withMaven(
              maven: 'maven3',
              jdk: "$jdk",
              publisherStrategy: 'EXPLICIT',
              globalMavenSettingsConfig: 'oss-settings.xml',
              mavenOpts: '-Xms2g -Xmx4g',
              mavenLocalRepo: ".repository") {
        sh "mvn -V -B clean install -DskipTests -T10 -e"
      }
    }
  }
  stage("Setup servlet tck"){
    env.JAVA_HOME='${tool "$jdk"}'
    env.PATH="${env.JAVA_HOME}/bin:${env.PATH}"
    sh "wget https://jenkins.webtide.net/userContent/servlettck-4.0_latest.zip"
    sh "unzip servlettck-4.0_latest.zip"

    sh "cd jetty-distribution/target/ && mkdir jetty-base"
    sh "cd jetty-distribution/target/jetty-base && java -jar ../distribution/start.jar --create-startd --add-to-start=resources,server,http,https,http2c,webapp,deploy,jsp,jmx,jmx-remote"
    sh 'find servlettck -name *.war -exec cp {} jetty-distribution/target/jetty-base/webapps/ \\;'

    //${env.WORKSPACE}
    //def props = readProperties file: "${env.WORKSPACE}/servlettck/bin/ts.jte"
    //props['work.dir'] = "${env.WORKSPACE}/JTWork"
    //props['report.dir'] = "${env.WORKSPACE}/JTReport"
    //writeFile file: "${env.WORKSPACE}/servlettck/bin/ts.jte", text: propsToString(props)
    unstash name: 'ts.jte'
    // replace values in ts.jte
    def text = readFile "ts.jte"
    text = text.replaceAll("@WORKSPACE@", "${env.WORKSPACE}")
    writeFile file:"servlettck/bin/ts.jte", text: text
    //sh "cp ts.jte servlettck/bin"
    //sh "cat servlettck/bin/ts.jte"

    unstash name: 'realm.ini'
    sh "cp realm.ini jetty-distribution/target/jetty-base/start.d"

    unstash name: 'realm.properties'
    sh "cp realm.properties jetty-distribution/target/jetty-base/etc"

    unstash name: 'test-realm.xml'
    sh "cp test-realm.xml jetty-distribution/target/jetty-base/etc"

    unstash name: 'cacerts.jks'
    sh "cp cacerts.jks servlettck/bin/certificates"
    sh "cp cacerts.jks jetty-distribution/target/jetty-base/etc"

    unstash name: 'clientcert.jks'
    sh "cp clientcert.jks servlettck/bin/certificates"
    sh "cp clientcert.jks jetty-distribution/target/jetty-base/etc"

    sh "cd jetty-distribution/target/jetty-base && java -Duser.language=en -Duser.country=US -Djavax.net.ssl.trustStore=etc/cacerts.jks -Djavax.net.ssl.keyStore=etc/clientcert.jks -Djavax.net.ssl.keyStorePassword=changeit -jar ../distribution/start.jar jetty.sslContext.trustStorePath=etc/cacerts.jks &"
  }
  stage("run servlet tck"){
    try {
      timeout( time: 3, unit: 'HOURS' ) {
        withAnt( installation: 'ant-latest', jdk: "$jdk" ) {
          sh "cd servlettck/bin && ant run.all"
        }
      }
    } catch(Throwable e){
      e.printStackTrace();
    }
    publishHTML([allowMissing: false, alwaysLinkToLastBuild: true, keepAll: true, reportDir: "${env.WORKSPACE}/JTReport/html", reportFiles: 'report.html', reportName: 'TCK Report', reportTitles: ''])
  }
}
