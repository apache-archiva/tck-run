def branch = params.JETTY_BRANCH ?: "jetty-9.4.x"
def jdk = params.JDK ?: "jdk8"

node('linux'){
  stage("cleanup"){
    sh "rm -rf *"
  }
  stage("Checkout TCK Run") {
    git url: "https://github.com/jetty-project/tck-run.git", branch: "master"
    stash name: 'ts.jte', includes: 'ts.jte'
    stash name: 'realm.ini', includes: 'realm.ini'
    stash name: 'realm.properties', includes: 'realm.properties'
    stash name: 'test-realm.xml', includes: 'test-realm.xml'
    stash name: 'cacerts.jks', includes: 'cacerts.jks'
    stash name: 'clientcert.jks', includes: 'clientcert.jks'
    stash name: 'log4j2.xml', includes: 'log4j2.xml'
  }

  stage("Checkout Jetty") {
    git url: "https://github.com/eclipse/jetty.project.git", branch: "$branch"
  }
  stage("Build Jetty") {
    timeout(time: 30, unit: 'MINUTES') {
      withMaven(
              maven: 'maven3',
              jdk: "$jdk",
              publisherStrategy: 'EXPLICIT',
              globalMavenSettingsConfig: 'oss-settings.xml',
              mavenOpts: '-Xms2g -Xmx4g',
              mavenLocalRepo: ".repository") {
        sh "mvn -V -B -pl jetty-home -am clean install -DskipTests -T6 -e"
      }
    }
  }
  stage("Setup servlet tck"){
    echo "Starting withEnv()"
    withEnv(["JAVA_HOME=${ tool "$jdk" }", "PATH=${ tool "$jdk" }/bin:${env.PATH}"]) {
      // env.JAVA_HOME='${tool "$jdk"}'
      // env.PATH="${env.JAVA_HOME}/bin:${env.PATH}"

      echo "JAVA_HOME=${env.JAVA_HOME}"
      echo "PATH=${env.PATH}"

      sh "ls -la ${env.JAVA_HOME}"

      // Execute some simple lookups of required command line applications
      // If the application isn't found, then it fails the build
      sh "which curl"
      sh "which wget"
      sh "which unzip"
      sh "which find"
      sh "which java"

      echo "Fetching servlettck from ${env.JENKINS_URL}userContent/tcks/servlettck-4.0_latest.zip"
      sh "curl -O ${env.JENKINS_URL}userContent/tcks/servlettck-4.0_latest.zip"

      echo "Unpacking Servlet TCK"
      sh "unzip servlettck-4.0_latest.zip"

      sh "cd jetty-home/target/ && mkdir jetty-base"
      sh "cd jetty-home/target/jetty-base && mkdir etc && cd .."

      sh "ls -la jetty-home/target/"
      sh "ls -la jetty-home/target/jetty-base"

      echo "Running home to create startd"

      sh "cd jetty-home/target/jetty-base && java -jar ../jetty-home/start.jar --approve-all-licenses --create-startd --add-to-start=resources,server,http,,http2c,webapp,deploy,jsp,logging-log4j2"
      //sh "cd jetty-home/target/jetty-base && java -jar ../jetty-home/start.jar --approve-all-licenses --create-startd --add-to-start=resources,server,http,https,http2c,webapp,deploy,jsp,logging-log4j2"

      sh "ls -la jetty-home/target/jetty-base"
      sh "ls -la jetty-home/target/jetty-base/start.d"

      echo "Copying war from servlet TCK to webapps"
      sh 'find servlettck -name *.war -exec cp {} jetty-home/target/jetty-base/webapps/ \\;'

      echo "Unstashing ts.jte"
      unstash name: 'ts.jte'
      // replace values in ts.jte
      def text = readFile "ts.jte"
      text = text.replaceAll("@WORKSPACE@", "${env.WORKSPACE}")
      writeFile file:"servlettck/bin/ts.jte", text: text

      echo "Unstashing realm.ini"
      unstash name: 'realm.ini'
      sh "cp realm.ini jetty-home/target/jetty-base/start.d/"

      echo "Unstashing realm.properties"
      unstash name: 'realm.properties'
      sh "cp realm.properties jetty-home/target/jetty-base/etc/"

      echo "Unstashing test-realm.xml"
      unstash name: 'test-realm.xml'
      sh "cp test-realm.xml jetty-home/target/jetty-base/etc/"

      echo "Unstashing cacerts.jks"
      unstash name: 'cacerts.jks'
      sh "cp cacerts.jks servlettck/bin/certificates"
      sh "cp cacerts.jks jetty-home/target/jetty-base/etc/"

      echo "Unstashing clientcerts.jks"
      unstash name: 'clientcert.jks'
      sh "cp clientcert.jks servlettck/bin/certificates"
      sh "cp clientcert.jks jetty-home/target/jetty-base/etc/"

      unstash name: 'log4j2.xml'
      sh "cp log4j2.xml jetty-home/target/jetty-base/resources/"

      sh "ls -la jetty-home/target/jetty-base"

      echo "Executing Jetty Instance ..."
      sh "cd jetty-home/target/jetty-base && java -Duser.language=en -Duser.country=US -Djavax.net.ssl.trustStore=etc/cacerts.jks -Djavax.net.ssl.keyStore=etc/clientcert.jks -Djavax.net.ssl.keyStorePassword=changeit -Dorg.eclipse.jetty.ssl.password=changeit -jar ../jetty-home/start.jar jetty.sslContext.trustStorePath=etc/cacerts.jks jetty.sslContext.keyStorePassword=changeit org.eclipse.jetty.ssl.password=changeit jetty.sslContext.trustStorePassword=changeit &"
    }
  }
  stage("run servlet tck"){
    try {
      timeout( time: 3, unit: 'HOURS' ) {
        withAnt( installation: 'ant-latest', jdk: "$jdk" ) {
          withEnv(["JAVA_HOME=${ tool "$jdk" }", "PATH+ANT=${tool 'ant-latest'}/bin:${env.JAVA_HOME}/bin"]) {
            sh "ls -la jetty-home/target/jetty-base"
            sh "cd servlettck/bin && ant run.all"
          }
        }
      }
    } catch(Throwable e){
      e.printStackTrace();
    }
    currentBuild.description = "Build branch $branch with jdk $jdk"
    archiveArtifacts artifacts: "${env.WORKSPACE}/JTReport/text/*.txt",allowEmptyArchive: true
    archiveArtifacts artifacts: "jetty-home/target/jetty-base/logs/*.*",allowEmptyArchive: true
    publishHTML([allowMissing: false, alwaysLinkToLastBuild: true, keepAll: true, reportDir: "${env.WORKSPACE}/JTReport/html", reportFiles: 'report.html', reportName: 'TCK Report', reportTitles: ''])
  }
}

// vim:syntax=groovy expandtab tabstop=2 softtabstop=2 shiftwidth=2
