
def branch = params.JETTY_BRANCH ?: "jetty-9.4.x"

node('linux'){
  stage("cleanup"){
    sh "rm -rf *"
  }
  stage("Checkout") {
    git url: "https://github.com/jetty-project/tck-run.git", branch: "master"
    git url: "https://github.com/eclipse/jetty.project.git", branch: "$branch"
  }
  stage("Build Jetty") {
    timeout(time: 30, unit: 'MINUTES') {
      withMaven(
              maven: 'maven3',
              jdk: "jdk8",
              publisherStrategy: 'EXPLICIT',
              globalMavenSettingsConfig: 'oss-settings.xml',
              mavenOpts: '-Xms1g -Xmx4g',
              mavenLocalRepo: ".repository") {
        sh "mvn -V -B clean install -DskipTests -T8 -e"
      }
    }
  }
  stage("Setup servlet tck"){
    env.JAVA_HOME="${tool 'jdk8'}"
    env.PATH="${env.JAVA_HOME}/bin:${env.PATH}"
    sh "wget https://jenkins.webtide.net/userContent/websockettck-1.1_latest.zip"
    sh "unzip websockettck-1.1_latest.zip"
    sh "ls -lrt"
    sh "cd jetty-distribution/target/ && mkdir jetty-base"
    sh "cd jetty-distribution/target/jetty-base && java -jar ../distribution/start.jar --create-startd --add-to-start=resources,server,http,https,http2c,webapp,deploy,jsp,jmx,jmx-remote,websocket"
    sh 'find websockettck -name *.war -exec cp {} jetty-distribution/target/jetty-base/webapps/ \\;'

    //${env.WORKSPACE}
    //def props = readProperties file: "${env.WORKSPACE}/servlettck/bin/ts.jte"
    //props['work.dir'] = "${env.WORKSPACE}/JTWork"
    //props['report.dir'] = "${env.WORKSPACE}/JTReport"
    //writeFile file: "${env.WORKSPACE}/servlettck/bin/ts.jte", text: propsToString(props)
    sh "wget -O ts.jte https://raw.githubusercontent.com/jetty-project/tck-run/master/wsts.jte"
    sh "cp ts.jte websockettck/bin"

    //sh "wget -O realm.ini https://raw.githubusercontent.com/jetty-project/tck-run/master/realm.ini"
    //sh "cp realm.ini jetty-distribution/target/jetty-base/start.d"

    //sh "wget -O realm.properties https://github.com/jetty-project/tck-run/raw/master/realm.properties"
    //sh "cp realm.properties jetty-distribution/target/jetty-base/etc"

    //sh "wget -O test-realm.xml https://github.com/jetty-project/tck-run/raw/master/test-realm.xml"
    //sh "cp test-realm.xml jetty-distribution/target/jetty-base/etc"

    //sh "wget -O cacerts.jks https://github.com/jetty-project/tck-run/raw/master/cacerts.jks"
    //sh "cp cacerts.jks servlettck/bin/certificates"
    //sh "cp cacerts.jks jetty-distribution/target/jetty-base/etc"

    //sh "wget -O clientcert.jks https://github.com/jetty-project/tck-run/raw/master/clientcert.jks"
    //sh "cp clientcert.jks servlettck/bin/certificates"
    //sh "cp clientcert.jks jetty-distribution/target/jetty-base/etc"

    //sh "cd jetty-distribution/target/jetty-base && java -Duser.language=en -Duser.country=US -Djavax.net.ssl.trustStore=etc/cacerts.jks -Djavax.net.ssl.keyStore=etc/clientcert.jks -Djavax.net.ssl.keyStorePassword=changeit -jar ../distribution/start.jar jetty.sslContext.trustStorePath=etc/cacerts.jks &"
    sh "cd jetty-distribution/target/jetty-base && java -Duser.language=en -Duser.country=US -jar ../distribution/start.jar  &"
  }
  stage("run websocket tck"){
    try {
      timeout( time: 3, unit: 'HOURS' ) {
        withAnt(installation: 'ant-latest', jdk: 'jdk8') {
          sh "cd websockettck/bin && ant run.all"
        }
      }
    } catch(Throwable e){
      e.printStackTrace();
    }
    publishHTML([allowMissing: false, alwaysLinkToLastBuild: true, keepAll: true, reportDir: '${env.WORKSPACE}/JTReport/html', reportFiles: 'report.html', reportName: 'TCKReport', reportTitles: ''])
  }
}
